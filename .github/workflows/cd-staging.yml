name: Deploy Staging ðŸš€

on:
  push:
    branches: [ "main" ]

jobs:
  deploy-staging:
    name: Deploy to staging server
    runs-on: ubuntu-latest
    environment: Staging

    steps:
      - name: Execute deployment command
        uses: appleboy/ssh-action@v1.0.3
        env:
          APP_PATH_STAGING: ${{ vars.APP_PATH_STAGING }}
          GIT_URL: ${{ vars.GIT_URL }}
          POSTGRES_USER: ${{ secrets.DB_USER }}
          POSTGRES_PASSWORD: ${{ secrets.DB_PASSWORD }}
          POSTGRES_DB: ${{ vars.DB_DBNAME }}
          POSTGRES_HOST: ${{ secrets.DB_HOST }}
          POSTGRES_PORT: ${{ secrets.DB_PORT }}

        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER_NAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          envs: APP_PATH_STAGING, GIT_URL, POSTGRES_USER, POSTGRES_PASSWORD, POSTGRES_DB, POSTGRES_HOST, POSTGRES_PORT
          script: |

            if [[ -d "${APP_PATH_STAGING}" ]]; then 
              cd $APP_PATH_STAGING
              sudo docker compose down
              git pull --rebase
            else
              ssh-keyscan github.com > ~/.ssh/known_hosts
              git clone $GIT_URL $APP_PATH_STAGING
              cd $APP_PATH_STAGING
            fi

            # If there are any envars update
            echo "POSTGRES_USER=$POSTGRES_USER" > .env
            echo "POSTGRES_PASSWORD=$POSTGRES_PASSWORD" >> .env
            echo "POSTGRES_DB=$POSTGRES_DB" >> .env
            echo "POSTGRES_HOST=$POSTGRES_HOST" >> .env
            echo "POSTGRES_PORT=$POSTGRES_PORT" >> .env

            # Run app
            docker compose up app-staging --build --detach
      
      - name: Hit Endpoint
        run: |
          sleep 20
          curl ${{ secrets.STAGING_URL }}